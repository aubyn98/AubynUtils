"use strict";Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"});const h=require("lodash"),l=Object.prototype.toString,w=Object.prototype.hasOwnProperty,f=Object.getOwnPropertyDescriptors,y=Object.defineProperty,a=Object.defineProperties;function u(t){return l.call(t).slice(8,-1)}function j(t,r){return t==null?!1:w.call(t,r)}function m(t){return typeof t>"u"||t===null}function P(t){return u(t)==="Array"?t.map(r=>a({},f(r))):u(t)==="Object"?a({},f(t)):t}function D(t){const r=new WeakMap;function n(e){if(e==null||["String","Number","Boolean","Symbol","BigInt","Function"].includes(u(e)))return e;if(r.has(e))return r.get(e);const i=u(e);let s;switch(i){case"Array":s=[],r.set(e,s),e.forEach(o=>s.push(n(o)));break;case"Date":s=new Date(e),r.set(e,s);break;case"RegExp":s=new RegExp(e.source,e.flags),s.lastIndex=e.lastIndex,r.set(e,s);break;case"Map":s=new Map,r.set(e,s),e.forEach((o,g)=>s.set(n(g),n(o)));break;case"Set":s=new Set,r.set(e,s),e.forEach(o=>s.add(n(o)));break;case"Error":s=new window[i](e.message),Object.getOwnPropertyNames(e).forEach(o=>{s[o]=n(e[o])}),r.set(e,s);break;default:const d=Object.getPrototypeOf(e);s=Object.create(d),r.set(e,s);const p=Object.getOwnPropertyDescriptors(e);Object.getOwnPropertyNames(p).forEach(o=>{const g=p[o];g.get||g.set?Object.defineProperty(s,o,g):s[o]=n(e[o])});break}return s}return n(t)}function S(t){const r=f(t);return Object.keys(r).filter(n=>r[n].writable||r[n].set)}function b(t){let r=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!1;const n=f(t);return Object.keys(n).reduce((e,c)=>(n[c].set&&y(e,c,n[c]),n[c].writable&&(r&&u(t[c])==="Object"?e[c]=b(t[c],r):y(e,c,n[c])),e),{})}function E(t){const r=f(t);return Object.keys(r).filter(n=>r[n].get&&!r[n].set)}function O(t){let r=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!1;const n=f(t);return Object.keys(n).reduce((e,c)=>(r&&u(t[c])==="Object"?e[c]=O(t[c],r):n[c].get&&!n[c].set&&(e[c]=t[c]),e),{})}function x(t,r,n){var e,c;let i=arguments.length>3&&arguments[3]!==void 0?arguments[3]:{};(e=i.prefix)!==null&&e!==void 0||(i.prefix=""),(c=i.direction)!==null&&c!==void 0||(i.direction="left");const{prefix:s,direction:d}=i;n.forEach(p=>{const o=s?s+h.capitalize(p):p;d==="left"&&(t[o]=r[p]),d==="right"&&(t[p]=r[o])})}exports.cloneDeepWithDescriptors=D;exports.cloneWithDescriptors=P;exports.getAssignKey=S;exports.getOnlyGetterKey=E;exports.getRawType=u;exports.hasOwnProperty=j;exports.isNullish=m;exports.pickAssigns=b;exports.pickOnlyGetter=O;exports.transformSetVal=x;
